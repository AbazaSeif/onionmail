
Use:
	onionmail [-q] [-f <config file>] [-v] [-p <password>] [-ndk] 
		[-pf <global_slat_keyfile>] [-d] [--reboot] [--pgp] [-pi]
		[-rpf <remotePasswdFile>] [-bm]
		[--gen-rpass] [-sp] [-rc <file> ]
		[--rpass-server] [-ntx] [-dr <outfile> ]
		
	onionmail [-q] --gen-passwd 
	onionmail [-q] --gen-servers [-sp] -f <config file> [--pgp] [--set-pgp]
	onionmail [-q] --set-pgp
	onionmail [-q] --stop -f <config file>
	onionmail [-q] --gen-keyfile <file> <bits>
	onionmail [-q] --gen-keyfile <file> <bits> --show-passwd
	onionmail [-q] [-d] --reboot 
	onionmail [-q] --kctl
	onionmail [-q] --pgp
	onionmail -q --test-java-b
	onionmail [-q] --test-java
	onionmail ...
	
	Options:      

	-dr	<file>	Redirect Main output checklist to file.
        -f	<par>	Set config file and directory 
			(Must be in `dir/config.conf` format).
	-v		Enable verbose.
	-p	<par>	Use a password by command line for all KeyBlock files.
	-pi		Use the STDIN password mode:
			When OnionMail sends a string to stderr:
			OM:[PASS] Send password to STDIN
			Send the server's password to stdin.

	-ndk		Do not delete any KeyBlock and sysop file.
	-sp		Choose passwords manually for all KeyBlock files.
	-q		Disable copyright message (must be first parameter).
	-d		Daemonize: Redirect stdout to onionstart.log file.
	-rpf <file>	Get the passphrase remotely via remote passphrase file
			and server.
	--pgp		Save the files sysop.txt in encrypted gpg messages.
	-pf	<file>	Calculate password from global salt keyfile.   
			The password is calculated form the filename and 
			contents of file or previous -pf and/or -sp password.
			You can combine -pf and/or -p 
		Eg.:
			-p passw1 -pf file1 -p pass2 -pf file2
			
			The password Will calculate via:
			Der2048(
				Der2048( 
					Der2048(passw1, file2) , 
					pass2), 
				file2)
			
	Special commands:

	--gen-password	Require an input line and generate an encrypted 
			password.
			
	--gen-servers	Generate new servers and exit.
	--stop		Stop onionmail.
	--del-keys	Delete all KeyBlock and sysop files.
	--gen-keyfile	Generate new global salt Keyfile.
	--show-passwd	Show current password generated.
	--reboot	Reboot server via remote network seed/push keys.
	--set-pgp	Set manually the server's PGP private key.
			Require some input files width ASCII PGP keys and
			passphrases.
	--kctl		Show the KCTL remote menù to manage remote seeds of 
			keys.

	--gen-rpass	Start remote passphrase files generator.
			If this parameter is preceded by -sp you can choose
			the passphrase to store.

	--test-java	Test JAVA limitations on DH and DSA Key generation.
	--test-java-b	Test JAVA and return a simple string.

	--rpass-server	Do the remote passphrase server (one session only).
	-rc <file>	Counter file. Increase the number into the file
			when OnionMail start.

	--bm		Batch mode:
			The batch mode is used with -q to run OnionMail in
			simple way to implements batch script.

			When OnionMail starts in batch mode, OnionMail read
			some header lines by STDIN. These haders are termiated
			by an empty line. The scructure of the headers is like
			mail headers (it use the same routine).

	-ntx		Do not test the hidden service connections and 
			terminate.

	Others OnionMail special commands and utilities:

	--test-java	Try to test RSA, DH, DSA key generation 
			(KeyPairGenerator).

	--test-java-b	Same of --test-java but in bath mode.
	
	--rnd-passwd	Generate a random password.
			Use: --rnd-passwd <lenght> <maxSpecCh>
			Whare <maxSpecCh> is the number of special charatters.

	--rnd-passcr	Same of --rnd-passwd but print the encrypted password.

	--rnd-epass 	Generate a random password that have the same chance 
			for each charatters (with length multiple of 94).

	--rnd-passcrn	Random and crypt multiple passwords generator.
			It generate some passwords in clear and encrypted 
			formats, print all passwords with a tag.

			There are two usage of this function:
			--rnd-passcrn <a> <b> <c>
			a = Number of password to generate.
			b = Charatters length.
			c = Number of special charatters.

			Example: --rnd-passcrn 3 8 8
			This generates 3 passwords.

			--rnd-passcrn { [e]<len> ... }
			len = Password length.
			e = Generate a passsword with --rnd-epass mode.

			Example: --rnd-passcrn { 10 e94 20 e940 }
			This generates 4 passwords.

		Output fomat of --rnd-passcrn

		P<number>: <password>
		S<number>: <encrtypted password>
		T<number>: <type>

		Where:
			number = The number of password.
			type = Password type (N = normal, E = --rnd-epass ).

	List of OnionMail's batch headers:
	Name			Type	Meaning
	%NICK%-pgp-root		path	Set the public PGP ASCII armor key file
					root user (use full path).
	%NICK%-pgp-key		path	Set the server's PGP ASCII armor key 
					file (public and private in the 
					same file).
	%NICK%-pgp-pass		str	Set the server's PGP key passphrase.
	%NICK%-pass		str	Set the server's password.
	%NICK%-delkey		pres	Delete the ASCII armor key files.
	global-autoclose	pres	Terminate OnionMail after batch 
					oprations.
	global-autodelete	pres	Wipe RAM data of this headers.
	global-echo		str	Print a string to STDOUT.
	global-stderr		str	Print a string to STDERR.
	global-selpass		str	Set the global password.
	global-pass		bool	Set the -sp flag.
	global-setpgp-root	bool	Set the ROOT public key.
	global-setpgp		bool	Set the servers key.
	global-setndk		bool	Don't delete sysop.txt and keyblock.txt.

	You must replace %NICK% with server's nick name.
	Types:
	Path	Full path of a file.
	Str	String.
	Bool	Boolean (Valid values: Y, N, YES, NO, TRUE, FALSE, 0, 1)
	Pres	The presence of header activate the function.
		(The parameter will discard).

	When OnionMail ir ready to read the headers is send a line to 
	the STDOUT contains OM:[DATA] string.
	When the header reding is complete OnionMail reply: OM:[DATA_OK]

	Other OnionMail's batch reply:
	OM:[DATA]	Ready to read.
	OM:[ERR]	Invalid PGP key.
	OM:[PGP_ERR]	PGP Error on key.
	OM:[PGP_OK]	PGP Key accepted (followed by nickname of the server).
	OM:[DATA_OK]	Header readed and accepted.
	OM:[ERROR]	Fatal error.
	OM:[DELETE]	OnionMail has delete all headers in RAM.
	OM:[COMPLETE]	Operation complete.
	OM:[RUNNING]	OnionMail till running.
	OM:[TEST]GOOD	Java test Ok.
	OM:[TEST]BAD	Java test Error.

If you use OnionMail java file directly use:
	java -jar onionmail.jar <parameters>
